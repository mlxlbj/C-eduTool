数组：
	1 数组每一个数据元素都是同质(同一种数据类型)
	2 数组的每一个数据空间地址都是连续的
	3 数组不可以越界访问 第一个数据元素下标是0 ~ len - 1
	4 数组脱离开定义则不可以整体赋值
		memcpy strcpy 

==============================
main => func => file =>makefile => lib .so .a


头文件：
	
	“”	: 一般是从当前文件目录中查找，如果没有则从系统头文件中查找
	<>	: 一般是从系统头文件目录中查找 /usr/include/

	函数声明
	头文件
	宏命令
	条件编译
	全局变量


	-I : 表好似指定头文件存放路径


=================================================
makefile : 多文件编译
	也是一门计算机语言 叫规则性一门语言

	1 创建makefile文件
		touch Makefile
	2 书写格式
		规则名：
		tab cmd

		默认规则 => all
	3 执行
		make => 表示执行第一条规则

		make 规则名
=====================================
	参数：
	-s : 表示静态编译
		或者在makefile文件中的命令前面添加@
	-f : 表示指定makefile的文件名
		案例：
			[root@localhost make]# make -f tom test
			echo "test"
			test
======================================
依赖：
	1 依赖文件
	2 依赖规则 优先执行依赖规则


=================================
变量
	CC=gcc
取值：
	${CC} or $(varname)
赋值：
	=	: 表示赋值
	+=  : 表示在原有基础上添加
	?=	: 表示判断前面是否定义，如果定义则取出前面值，如果未定义，则取出后面的
	:=	: 表示给这个变量去另一个变量值，如果另一个变量定义在这个变量前面，则可以取出，如果定义在变量后面，则不可以取出

	自动变量
	$@ : 表示目标
	$^ : 表示所有依赖 $+
	$< : 表示第一个依赖
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
命令操作
	1 ifconfig  查看是否ip地址

	2 ifconfig eth0 ip

	3 ping 192.168.0.254 

	4 showmount -e 192.168.0.254

	5 mount 192.168.0.254:/ken /mnt

	6 ls /mnt

	7 cp /mnt/*  /tmp
	
	8 umount /mnt
	=> down_up.sh


















